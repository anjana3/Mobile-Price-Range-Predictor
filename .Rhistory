testing=mobile[-intrain,]
dim(training)
dim(testing)
anyNA(mobile)
#training the decision tree classifier with criterion as information gain
trctrl=trainControl(method = "repeatedcv",number=10,repeats = 3)
set.seed(15000)
dtree_fit=train(price_range ~.,data=training,method="rpart",parms=list(split="information"),trControl=trctrl,tuneLength=10)
#plot the decision tree
prp(dtree_fit$finalModel,box.palette = "green",tweak = 1.2)
#plot the decision tree
prp(dtree_fit$finalModel,box.palette = "green",tweak = 1.2)
#prediction
test_pred=predict(dtree_fit,newdata=testing)
#confusion matrix
confusionMatrix(test_pred,testing$Material.Group)
#train the decisiont ree classifer with criterion as gini index
set.seed(3000)
dtree_fit_gini=train(Material.Group ~.,data=training,method="rpart",parms=list(split="gini"),trControl=trctrl,tuneLength=10)
#plot decision tree
prp(dtree_fit_gini$finalModel,box.palette = "red",tweak = 1.2)
#plot decision tree
library(rpart.plot)
prp(dtree_fit_gini$finalModel,box.palette = "red",tweak = 1.2)
dtree_fit_gini=train(Material.Group ~.,data=training,method="rpart",parms=list(split="gini"),trControl=trctrl,tuneLength=10)
#prediction
test_pred=predict(dtree_fit,newdata=testing)
#confusion matrix
confusionMatrix(test_pred,testing$price_range)
#train the decisiont ree classifer with criterion as gini index
set.seed(3000)
dtree_fit_gini=train(price_range ~.,data=training,method="rpart",parms=list(split="gini"),trControl=trctrl,tuneLength=10)
#plot decision tree
library(rpart.plot)
prp(dtree_fit_gini$finalModel,box.palette = "red",tweak = 1.2)
#prediction
test_pred_gini=predict(dtree_fit_gini,newdata = testing)
#plot the decision tree
prp(dtree_fit$finalModel,box.palette = "green",tweak = 1.2)
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
# Importing the dataset
dataset = read.csv(file.choose())
# Importing the dataset
dataset = read.csv(file.choose())
dataset = dataset[3:5]
head(dataset)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
data=read.csv(file.choose())
data
head(data)
names(data)
library(shiny, dependencies=TRUE)
library(shiny)
install.packages("shiny")
#Step 1 : install the shiny library and all it's dependencies like this
library(shiny, dependencies=TRUE)
library(shiny)
library(shiny)
library(shiny)
ui <- fluidPage(
#input  : stuff you allow the users to interact with:actionButton, numericInput
)
server <- function(input, output, session) {
# fetch the input from ui and respond with some output: renderPlot, renderPrint...etc
}
# call shinyApp and launch it
shinyApp(ui=ui, server=server)
#Step 3 : try-and-error to build the app, insert your first model
#all the libraries you need for your machine learning models and plots
library(rpart)				        # Popular decision tree algorithm
library(rattle)					# Fancy tree plot
install.packages("rattle")
library(rattle)					# Fancy tree plot
library(rattle)					# Fancy tree plot
install.packages("rattle")
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
install.packages("party")
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
install.packages("partykit")
library(partykit)				# Convert rpart object to BinaryTree
library(tree) # good to have but not necessary
library(rattle)					# Fancy tree plot
install.packages("rattle")
library(rattle)					# Fancy tree plot
library(tree) # good to have but not necessary
# begining of ui component ÿ
ui<-shinyUI(fluidPage(
fluidRow(
column(12,
"Model Selection Panel",
headerPanel(title="building Predictive Analytics"),
sidebarLayout(
sidebarPanel(
h3('choose the model'),
# the actioButton called rpart which is the name of the variable you need to use in the server component
actionButton('rpart', label = 'Decision Tree',icon("leaf",lib="glyphicon"),
style="color: #fff; background-color: #339933; border-color: #2e6da4"),
# the training sample split you allow the user to control on your model
numericInput("ratio", "training sample in %", value=50/100, min = 50/100, max = 90/100, step=0.1)
),
# this is how you create many "tabs" for the output from ML models
mainPanel(
tabsetPanel( ,
tabPanel("first 5 rows of the dataframe", verbatimTextOutput("head")),
tabPanel("model result", tableOutput("result")),
tabPanel("model plot", plotOutput('plot')),
tabPanel("model summary", verbatimTextOutput('summary'))
)
)
)))
))
source('~/Desktop/1411148/r/shiny_mobiletree.r')
install.packages("shiny")
#Step 2: understand the template code : ui , server , shinyApp (refer to the main picture in the post )
library(shiny)
#Step 2: understand the template code : ui , server , shinyApp (refer to the main picture in the post )
library(shiny)
source('~/Desktop/1411148/r/shiny_mobiletree.r')
install.packages("shiny")
# begining of ui component ÿ
ui<-shinyUI(fluidPage(
fluidRow(
column(12,
"Model Selection Panel",
headerPanel(title="building Predictive Analytics"),
sidebarLayout(
sidebarPanel(
h3('choose the model'),
# the actioButton called rpart which is the name of the variable you need to use in the server component
actionButton('rpart', label = 'Decision Tree',icon("leaf",lib="glyphicon"),
style="color: #fff; background-color: #339933; border-color: #2e6da4"),
# the training sample split you allow the user to control on your model
numericInput("ratio", "training sample in %", value=50/100, min = 50/100, max = 90/100, step=0.1)
),
# this is how you create many "tabs" for the output from ML models
mainPanel(
tabsetPanel( ,
tabPanel("first 5 rows of the dataframe", verbatimTextOutput("head")),
tabPanel("model result", tableOutput("result")),
tabPanel("model plot", plotOutput('plot')),
tabPanel("model summary", verbatimTextOutput('summary'))
)
)
)))
))
#Step 1 : install the shiny library and all it's dependencies like this
#install the shiny package into R-studio
install.packages("shiny")
#Step 2: understand the template code : ui , server , shinyApp (refer to the main picture in the post )
library(shiny)
ui <- fluidPage(
#input  : stuff you allow the users to interact with:actionButton, numericInput
)
server <- function(input, output, session) {
# fetch the input from ui and respond with some output: renderPlot, renderPrint...etc
}
# call shinyApp and launch it
shinyApp(ui=ui, server=server)
data("iris")
data("iris")
source('~/Desktop/1411148/r/shiny_mobiletree.r')
runApp('Desktop/1411148/r')
install.packages("shiny")
shiny::runApp('Desktop/1411148/r')
install.packages("shiny")
runApp('Desktop/1411148/r')
install.packages("shiny")
shiny::runApp('Desktop/1411148/r')
install.packages("shiny")
shiny::runApp('Desktop/1411148/r')
install.packages("shiny")
shiny::runApp('Desktop/1411148/r')
install.packages("shiny")
shiny::runApp('Desktop/1411148/r')
install.packages("shiny")
shiny::runApp('Desktop/1411148/r')
install.packages("shiny")
library(rpart)				        # Popular decision tree algorithm
library(rattle)					# Fancy tree plot
library(rpart.plot)				# Enhanced tree plots
library(RColorBrewer)				# Color selection for fancy tree plot
library(party)					# Alternative decision tree algorithm
library(partykit)				# Convert rpart object to BinaryTree
library(tree) # good to have but not necessary
shinyApp(ui=ui, server=server)
# call shinyApp and launch it
shinyApp(ui=ui, server=server)
# call shinyApp and launch it
shinyApp(ui, server)
install.packages("shinyApp")
install.packages("rsconnect")
library("rsconnect")
install.packages("devtools")
runExample("01_hello")
install.packages("runExample")
shiny::runApp('Desktop/1411148/M.Tech project')
runApp('Desktop/1411148/r')
install.packages("shiny")
shiny::runApp('Desktop/1411148/r')
install.packages("shiny")
runApp('Desktop/1411148/M.Tech project')
runApp('Desktop/1411148/r/shiny')
runApp('Desktop/1411148/r/shiny')
runApp('Desktop/1411148/r/shiny')
runApp('Desktop/1411148/r/shiny/app.r')
runApp('Desktop/1411148/r/shiny/app.r')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
mobile <- read.csv(file.choose(), stringsAsFactors = FALSE)
runApp('Desktop/1411148/r/shiny/app.r')
shiny::runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
mobile_price <- read.csv("/home/tcs/Desktop/1411148/M.Tech project/MobilePriceClassification/train.csv", stringsAsFactors = FALSE)
intrain=createDataPartition(y=mobile_price$price_range,p=0.7,list=FALSE)
training=mobile_price[intrain,]
testing=mobile_price[-intrain,]
#testing=user_data[1,]
observeEvent(input$rpart,{
ml_rpart<-rpart(training$price_range~.,method='class',data=training,control=rpart.control(minsplit=8,cp=0))
model_pred<-predict(ml_rpart, testing, type="class")
output$correlation<-renderPlot({
df=data.frame(mobile_price$battery_power,mobile_price$price_range,mobile_price$ram,mobile_price$n_cores,mobile_price$four_g,mobile_price$int_memory,mobile_price$m_dep,mobile_price$touch_screen,mobile_price$px_height)
corrplot(cor(df),method = "ellipse",shade.col = NA,tl.col = "black",tl.srt = 45,addCoef.col =
"black",addcolorlabel="no",order = "AOE",height=400,width=600)
})
output$result<-renderTable({
table(model_pred, testing$price_range)    })
output$cm<-renderTable({
table()
})
output$summary1 <- renderPrint(summary(ml_rpart))
output$battery_powerInput <- renderPrint({ input$battery_powerInput })
output$summary <- renderPrint(head(summary(mobile_price)))
output$head<-renderPrint(head(mobile_price))
output$plot <- renderPlot({
prp(ml_rpart,box.palette = "green",tweak = 0.99,cex=.7, main="Pruned Classification Tree for Mobile Price  data")
# prune the treefirst then plot the pruned tree
})
})
observe({
intrain=createDataPartition(y=mobile_price$price_range,p=0.7,list=FALSE)
training=mobile_price[intrain,]
testing=mobile_price[-intrain,]
#testing=user_data[1,]
observeEvent(input$rpart,{
ml_rpart<-rpart(training$price_range~.,method='class',data=training,control=rpart.control(minsplit=8,cp=0))
model_pred<-predict(ml_rpart, testing, type="class")
output$correlation<-renderPlot({
df=data.frame(mobile_price$battery_power,mobile_price$price_range,mobile_price$ram,mobile_price$n_cores,mobile_price$four_g,mobile_price$int_memory,mobile_price$m_dep,mobile_price$touch_screen,mobile_price$px_height)
corrplot(cor(df),method = "ellipse",shade.col = NA,tl.col = "black",tl.srt = 45,addCoef.col =
"black",addcolorlabel="no",order = "AOE",height=400,width=600)
})
output$result<-renderTable({
table(model_pred, testing$price_range)    })
output$cm<-renderTable({
table()
})
output$summary1 <- renderPrint(summary(ml_rpart))
output$battery_powerInput <- renderPrint({ input$battery_powerInput })
output$summary <- renderPrint(head(summary(mobile_price)))
output$head<-renderPrint(head(mobile_price))
output$plot <- renderPlot({
prp(ml_rpart,box.palette = "green",tweak = 0.99,cex=.7, main="Pruned Classification Tree for Mobile Price  data")
# prune the treefirst then plot the pruned tree
})
})
})
observe({
battery_power =as.integer(input$battery_powerInput)
blue= as.integer(input$blueInput)
clock_speed=as.numeric(input$clock_speedInput)
dual_sim= as.integer(input$dual_simInput)
fc = as.integer(input$fcInput)
four_g=as.integer(input$four_gInput)
int_memory=as.integer(input$int_memoryInput)
m_dep=  as.numeric(input$m_depInput)
mobile_wt= as.integer(input$mobile_wtInput)
n_cores=as.integer(input$n_coresInput)
pc=as.integer(input$pc)
px_height=as.integer(input$px_heightInput)
px_width= as.integer(input$px_widthInput)
ram=as.integer(input$ramInput)
sc_h=as.integer(input$sc_hInput)
sc_w=as.integer(input$sc_wInput)
talk_time=as.integer(input$talk_timeInput)
three_g= as.integer(input$three_gInput)
touch_screen= as.integer(input$touch_screenInput)
wifi= as.integer(input$wifiInput)
test<-cbind( battery_power, blue,clock_speed,dual_sim, fc,four_g,int_memory,m_dep,mobile_wt, n_cores,pc,
px_height,px_width, ram,sc_h,sc_w,talk_time,three_g,touch_screen,wifi )
test<-as.data.frame(test)
test$price_range<-""
observeEvent(input$run_model,{
run_model<-rpart(training$price_range~.,method='class',data=training,control=rpart.control(minsplit=8,cp=0))
prediction<-predict(run_model, newdata=test, type="class")
output$results<-renderTable(prediction)
#output$mc<-renderTable(summary(predic))
output$test<-renderTable(test)
#output$test_plot<-renderPlot(prediction)
})
})
server <- function(input, output) {
output$downloadData<-downloadHandler(
filename = function(){
paste(input$values,".csv",sep="")
},
content = function(file){
write.csv( sliderValues(),file,row.names = FALSE)
}
)
set.seed(1000)
observe({
intrain=createDataPartition(y=mobile_price$price_range,p=0.7,list=FALSE)
training=mobile_price[intrain,]
testing=mobile_price[-intrain,]
#testing=user_data[1,]
observeEvent(input$rpart,{
ml_rpart<-rpart(training$price_range~.,method='class',data=training,control=rpart.control(minsplit=8,cp=0))
model_pred<-predict(ml_rpart, testing, type="class")
output$correlation<-renderPlot({
df=data.frame(mobile_price$battery_power,mobile_price$price_range,mobile_price$ram,mobile_price$n_cores,mobile_price$four_g,mobile_price$int_memory,mobile_price$m_dep,mobile_price$touch_screen,mobile_price$px_height)
corrplot(cor(df),method = "ellipse",shade.col = NA,tl.col = "black",tl.srt = 45,addCoef.col =
"black",addcolorlabel="no",order = "AOE",height=400,width=600)
})
output$result<-renderTable({
table(model_pred, testing$price_range)    })
output$cm<-renderTable({
table()
})
output$summary1 <- renderPrint(summary(ml_rpart))
output$battery_powerInput <- renderPrint({ input$battery_powerInput })
output$summary <- renderPrint(head(summary(mobile_price)))
output$head<-renderPrint(head(mobile_price))
output$plot <- renderPlot({
prp(ml_rpart,box.palette = "green",tweak = 0.99,cex=.7, main="Pruned Classification Tree for Mobile Price  data")
# prune the treefirst then plot the pruned tree
})
})
})
observe({
battery_power =as.integer(input$battery_powerInput)
blue= as.integer(input$blueInput)
clock_speed=as.numeric(input$clock_speedInput)
dual_sim= as.integer(input$dual_simInput)
fc = as.integer(input$fcInput)
four_g=as.integer(input$four_gInput)
int_memory=as.integer(input$int_memoryInput)
m_dep=  as.numeric(input$m_depInput)
mobile_wt= as.integer(input$mobile_wtInput)
n_cores=as.integer(input$n_coresInput)
pc=as.integer(input$pc)
px_height=as.integer(input$px_heightInput)
px_width= as.integer(input$px_widthInput)
ram=as.integer(input$ramInput)
sc_h=as.integer(input$sc_hInput)
sc_w=as.integer(input$sc_wInput)
talk_time=as.integer(input$talk_timeInput)
three_g= as.integer(input$three_gInput)
touch_screen= as.integer(input$touch_screenInput)
wifi= as.integer(input$wifiInput)
test<-cbind( battery_power, blue,clock_speed,dual_sim, fc,four_g,int_memory,m_dep,mobile_wt, n_cores,pc,
px_height,px_width, ram,sc_h,sc_w,talk_time,three_g,touch_screen,wifi )
test<-as.data.frame(test)
test$price_range<-""
observeEvent(input$run_model,{
run_model<-rpart(training$price_range~.,method='class',data=training,control=rpart.control(minsplit=8,cp=0))
prediction<-predict(run_model, newdata=test, type="class")
output$results<-renderTable(prediction)
#output$mc<-renderTable(summary(predic))
output$test<-renderTable(test)
#output$test_plot<-renderPlot(prediction)
})
})
}
shinyApp(ui = ui, server = server)
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
find_rtools()
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/linkedin')
df
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/linkedin')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
running rsconnect::showLogs(
running rsconnect::showLogs()
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/linkedin')
mobile_price[0]
mobile_price[1]
head(mobile_price[1])
runApp('Desktop/1411148/r/shiny/final')
output$mobile_price<- renderTable({
file_to_read=input$file1
if(is.null(file_to_read)){
return()
}
read.table(file_to_read$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
})
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Desktop/1411148/r/shiny/final')
runApp('Downloads')
setwd("/home/tcs/Desktop/1411148/r/shiny/final")
mobileprice=load(train.csv)
load(train.csv)
load("train.csv")
fgfg=load("train.csv")
runApp()
runApp()
runApp()
install.packages("DT")
library(DT)
library(DT)
library
library(shiny)
runExample("01_hello")
runApp()
runApp()
